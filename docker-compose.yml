version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: booth_postgres
    restart: unless-stopped
    volumes:
      - booth_db_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: 
        [
          "CMD-SHELL", 
          "pg_isready -U ${DB_USER} -d ${DB_NAME}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booth_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: booth_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - booth_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booth_network

  # Node.js API Application
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: booth-api:latest
    container_name: booth_api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: db
      REDIS_HOST: redis
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - booth_network

# Define networks
networks:
  booth_network:
    driver: bridge

# Define volumes
volumes:
  booth_db_data:
    driver: local
  booth_redis_data:
    driver: local
